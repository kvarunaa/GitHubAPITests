// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GitHubAPITests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("User Access GitHub APIs")]
    public partial class UserAccessGitHubAPIsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "User Access GitHub APIs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "User Access GitHub APIs", "\tAs a user of GitHub\r\n\tI want to Create , Edit , List issues from repo ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User can create issue in Repo using GitHub API")]
        [NUnit.Framework.CategoryAttribute("API")]
        public virtual void UserCanCreateIssueInRepoUsingGitHubAPI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can create issue in Repo using GitHub API", null, new string[] {
                        "API"});
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "issueTitle"});
            table1.AddRow(new string[] {
                        "this is a new defect1"});
#line 7
 testRunner.Given("I have made a API request to create issue in GitHub repo with issue title", ((string)(null)), table1, "Given ");
#line 10
 testRunner.Then("I see issue created in GitHub with status \'Created\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User can edit issue title in Repo using GitHub API")]
        [NUnit.Framework.CategoryAttribute("API")]
        public virtual void UserCanEditIssueTitleInRepoUsingGitHubAPI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can edit issue title in Repo using GitHub API", null, new string[] {
                        "API"});
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "updatedTitle",
                        "issueNumber"});
            table2.AddRow(new string[] {
                        "this is updated title1",
                        "1"});
#line 14
 testRunner.Given("I have made a API request to edit issue title in GitHub repo", ((string)(null)), table2, "Given ");
#line 17
 testRunner.Then("I see updated title assoicated to the issue with status \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User can get list of issues from GitHub Repo sorted by Update date")]
        [NUnit.Framework.CategoryAttribute("API")]
        public virtual void UserCanGetListOfIssuesFromGitHubRepoSortedByUpdateDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can get list of issues from GitHub Repo sorted by Update date", null, new string[] {
                        "API"});
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "updatedTitle",
                        "issueNumber"});
            table3.AddRow(new string[] {
                        "this is new title",
                        "2"});
#line 21
testRunner.Given("I have made a API request to edit issue title in GitHub repo", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "sortBy"});
            table4.AddRow(new string[] {
                        "updated"});
#line 24
testRunner.And("I have made a API request to get list of issues sorted by Update date", ((string)(null)), table4, "And ");
#line 27
testRunner.Then("I see list of issues sorted by Update date with status \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
